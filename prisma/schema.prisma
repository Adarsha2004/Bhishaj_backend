// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  
  // Medication-related relations
  medications   Medication[]
  reminders     Reminder[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Medication {
  id          String   @id @default(cuid())
  name        String
  description String?
  dosage      Int      @default(1)
  unit        String   @default("pill") // pill, tablet, ml, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reminders Reminder[]
  
  @@map("medications")
}

model Reminder {
  id              String        @id @default(cuid())
  isActive        Boolean       @default(true)
  dosage          Int           @default(1)
  mealTiming      MealTiming    @default(BEFORE_MEAL)
  notificationTime String       // HH:MM format (e.g., "10:00")
  duration        Int           @default(30) // Duration in days
  isEveryday      Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  startDate       DateTime      @default(now())
  endDate         DateTime?
  
  // Relations
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicationId String
  medication   Medication  @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  
  // Schedule and notifications
  schedules    ReminderSchedule[]
  notifications ReminderLog[]
  
  @@map("reminders")
}

model ReminderSchedule {
  id        String    @id @default(cuid())
  dayOfWeek DayOfWeek
  isActive  Boolean   @default(true)
  
  reminderId String
  reminder   Reminder @relation(fields: [reminderId], references: [id], onDelete: Cascade)
  
  @@unique([reminderId, dayOfWeek])
  @@map("reminder_schedules")
}

model ReminderLog {
  id          String           @id @default(cuid())
  scheduledAt DateTime
  status      NotificationStatus
  takenAt     DateTime?
  notes       String?
  createdAt   DateTime         @default(now())
  
  reminderId String
  reminder   Reminder @relation(fields: [reminderId], references: [id], onDelete: Cascade)
  
  @@map("reminder_logs")
}

// Enums
enum MealTiming {
  BEFORE_MEAL
  WITH_MEAL
  AFTER_MEAL
  
  @@map("meal_timing")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
  
  @@map("day_of_week")
}

enum NotificationStatus {
  PENDING
  SENT
  TAKEN
  MISSED
  SNOOZED
  
  @@map("notification_status")
}